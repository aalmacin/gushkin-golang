// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type ActionCount struct {
	Activity *Activity `json:"activity"`
	Count    int       `json:"count"`
	Day      string    `json:"day"`
}

type CreateActivityInput struct {
	Description string `json:"description"`
	FundAmt     int    `json:"fundAmt"`
	Positive    *bool  `json:"positive"`
}

type GetActionInput struct {
	Today *bool `json:"today"`
}

type GetWishInput struct {
	Filter *string `json:"filter"`
}

type NewWishInput struct {
	Description string   `json:"description"`
	Price       int      `json:"price"`
	Source      *string  `json:"source"`
	Priority    Priority `json:"priority"`
	Status      Status   `json:"status"`
}

type PerformActivityInput struct {
	ActivityID int `json:"activityId"`
}

type UpdateWishInput struct {
	ID          string    `json:"id"`
	Description *string   `json:"description"`
	Price       *int      `json:"price"`
	Source      *string   `json:"source"`
	Priority    *Priority `json:"priority"`
	Status      *Status   `json:"status"`
}

type Priority string

const (
	PriorityVeryHigh Priority = "VERY_HIGH"
	PriorityHigh     Priority = "HIGH"
	PriorityMedium   Priority = "MEDIUM"
	PriorityLow      Priority = "LOW"
	PriorityVeryLow  Priority = "VERY_LOW"
)

var AllPriority = []Priority{
	PriorityVeryHigh,
	PriorityHigh,
	PriorityMedium,
	PriorityLow,
	PriorityVeryLow,
}

func (e Priority) IsValid() bool {
	switch e {
	case PriorityVeryHigh, PriorityHigh, PriorityMedium, PriorityLow, PriorityVeryLow:
		return true
	}
	return false
}

func (e Priority) String() string {
	return string(e)
}

func (e *Priority) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Priority(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Priority", str)
	}
	return nil
}

func (e Priority) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type Status string

const (
	StatusBought    Status = "bought"
	StatusNotBought Status = "not_bought"
	StatusDisabled  Status = "disabled"
)

var AllStatus = []Status{
	StatusBought,
	StatusNotBought,
	StatusDisabled,
}

func (e Status) IsValid() bool {
	switch e {
	case StatusBought, StatusNotBought, StatusDisabled:
		return true
	}
	return false
}

func (e Status) String() string {
	return string(e)
}

func (e *Status) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Status(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Status", str)
	}
	return nil
}

func (e Status) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
